# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `Upload` scalar type represents a file upload.
scalar Upload

type Error {
  code: String!
  message: String
}

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentAtomButtonInput {
  id: ID
  label: String
  type: String
  url: String
}

type ComponentAtomButton {
  id: ID!
  label: String!
  type: String
  url: String
}

input ComponentAtomImageInput {
  id: ID
  media_image: ID
}

type ComponentAtomImage {
  id: ID!
  media_image: UploadFileEntityResponse!
}

input ComponentAtomInputFiltersInput {
  type: StringFilterInput
  label: StringFilterInput
  placeholder: StringFilterInput
  name: StringFilterInput
  required: BooleanFilterInput
  and: [ComponentAtomInputFiltersInput]
  or: [ComponentAtomInputFiltersInput]
  not: ComponentAtomInputFiltersInput
}

type ComponentAtomInput {
  id: ID!
  type: String
  label: String!
  placeholder: String!
  name: String!
  required: Boolean!
}

input ComponentAtomLinkFiltersInput {
  label: StringFilterInput
  url: StringFilterInput
  and: [ComponentAtomLinkFiltersInput]
  or: [ComponentAtomLinkFiltersInput]
  not: ComponentAtomLinkFiltersInput
}

type ComponentAtomLink {
  id: ID!
  label: String!
  url: String!
}

input ComponentAtomTextInput {
  id: ID
  text: String
}

type ComponentAtomText {
  id: ID!
  text: String!
}

input ComponentAtomTitleInput {
  id: ID
  text: String
}

type ComponentAtomTitle {
  id: ID!
  text: String!
}

type ComponentOrganismsHeader {
  id: ID!
  logo: UploadFileEntityResponse
  nav_link(
    filters: ComponentAtomLinkFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentAtomLink]
}

type ComponentOrganismsHeroOpener {
  id: ID!
  title: ComponentAtomTitle!
  description: ComponentAtomText!
  bg_media: UploadFileEntityResponse!
}

type ComponentOrganismsRegistrationForm {
  id: ID!
  input(
    filters: ComponentAtomInputFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentAtomInput]!
  submit: ComponentAtomButton
  title: ComponentAtomTitle!
  subtitle: ComponentAtomText
  alreadyRegistered: ComponentAtomLink
}

type ComponentOrganismsTitleDescriptionButton {
  id: ID!
  title: ComponentAtomTitle
  description: ComponentAtomText
  cta: ComponentAtomButton
  componentName: String!
}

input ComponentOrganismsTitleDescriptionImageInput {
  id: ID
  title: ComponentAtomTitleInput
  description: ComponentAtomTextInput
  image: ComponentAtomImageInput
  cta: ComponentAtomButtonInput
}

type ComponentOrganismsTitleDescriptionImage {
  id: ID!
  title: ComponentAtomTitle!
  description: ComponentAtomText!
  image: ComponentAtomImage!
  cta: ComponentAtomButton!
}

type ComponentUtilsComponent {
  id: ID!
  name: String!
}

enum ENUM_COMPONENTUTILSCOMPONENTSLIST_COMPONENTSLIST {
  TitleDescriptionPage
  Image
}

type ComponentUtilsComponentsList {
  id: ID!
  componentsList: ENUM_COMPONENTUTILSCOMPONENTSLIST_COMPONENTSLIST!
}

type ComponentUtilsMetaRepeatableComponent {
  id: ID!
  name: String
  content: String
  preventingIndex: Boolean
  structuredData: JSON
  metaImage: UploadFileEntityResponse
}

type ComponentUtilsSeo {
  id: ID!
  metaTitle: String
  metaDescription: String
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  uuid: StringFilterInput
  name: StringFilterInput
  surname: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  uuid: String
  name: String
  surname: String
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  uuid: String!
  name: String!
  surname: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input MenusMenuFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  slug: StringFilterInput
  items: MenusMenuItemFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [MenusMenuFiltersInput]
  or: [MenusMenuFiltersInput]
  not: MenusMenuFiltersInput
}

input MenusMenuInput {
  title: String
  slug: String
  items: [ID]
}

type MenusMenu {
  title: String!
  slug: String!
  items(
    filters: MenusMenuItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): MenusMenuItemRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type MenusMenuEntity {
  id: ID
  attributes: MenusMenu
}

type MenusMenuEntityResponse {
  data: MenusMenuEntity
}

type MenusMenuEntityResponseCollection {
  data: [MenusMenuEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_MENUSMENUITEM_TARGET {
  blank
  parent
  self
  top
}

input MenusMenuItemFiltersInput {
  id: IDFilterInput
  order: IntFilterInput
  title: StringFilterInput
  url: StringFilterInput
  target: StringFilterInput
  root_menu: MenusMenuFiltersInput
  parent: MenusMenuItemFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [MenusMenuItemFiltersInput]
  or: [MenusMenuItemFiltersInput]
  not: MenusMenuItemFiltersInput
}

input MenusMenuItemInput {
  order: Int
  title: String
  url: String
  target: ENUM_MENUSMENUITEM_TARGET
  root_menu: ID
  parent: ID
}

type MenusMenuItem {
  order: Int
  title: String!
  url: String
  target: ENUM_MENUSMENUITEM_TARGET
  root_menu: MenusMenuEntityResponse!
  parent: MenusMenuItemEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type MenusMenuItemEntity {
  id: ID
  attributes: MenusMenuItem
}

type MenusMenuItemEntityResponse {
  data: MenusMenuItemEntity
}

type MenusMenuItemEntityResponseCollection {
  data: [MenusMenuItemEntity!]!
  meta: ResponseCollectionMeta!
}

type MenusMenuItemRelationResponseCollection {
  data: [MenusMenuItemEntity!]!
}

union AppLoginComponentsDynamicZone = ComponentUtilsComponentsList | Error

scalar AppLoginComponentsDynamicZoneInput

input AppLoginInput {
  components: [AppLoginComponentsDynamicZoneInput!]
  publishedAt: DateTime
}

type AppLogin {
  components: [AppLoginComponentsDynamicZone]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    publicationState: PublicationState = LIVE
  ): AppLoginRelationResponseCollection
  locale: String
}

type AppLoginEntity {
  id: ID
  attributes: AppLogin
}

type AppLoginEntityResponse {
  data: AppLoginEntity
}

type AppLoginRelationResponseCollection {
  data: [AppLoginEntity!]!
}

union AppRegistrationComponentsDynamicZone =
  ComponentOrganismsRegistrationForm
  | Error

scalar AppRegistrationComponentsDynamicZoneInput

input AppRegistrationInput {
  components: [AppRegistrationComponentsDynamicZoneInput!]
  publishedAt: DateTime
}

type AppRegistration {
  components: [AppRegistrationComponentsDynamicZone]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    publicationState: PublicationState = LIVE
  ): AppRegistrationRelationResponseCollection
  locale: String
}

type AppRegistrationEntity {
  id: ID
  attributes: AppRegistration
}

type AppRegistrationEntityResponse {
  data: AppRegistrationEntity
}

type AppRegistrationRelationResponseCollection {
  data: [AppRegistrationEntity!]!
}

input AppTodoInput {
  Intro: ComponentOrganismsTitleDescriptionImageInput
  publishedAt: DateTime
}

type AppTodo {
  Intro: ComponentOrganismsTitleDescriptionImage
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type AppTodoEntity {
  id: ID
  attributes: AppTodo
}

type AppTodoEntityResponse {
  data: AppTodoEntity
}

union AuthorComponentsDynamicZone =
  ComponentAtomButton
  | ComponentAtomImage
  | ComponentAtomLink
  | ComponentAtomText
  | ComponentAtomTitle
  | ComponentOrganismsHeader
  | ComponentOrganismsTitleDescriptionImage
  | Error

scalar AuthorComponentsDynamicZoneInput

input AuthorInput {
  components: [AuthorComponentsDynamicZoneInput!]
  publishedAt: DateTime
}

type Author {
  components: [AuthorComponentsDynamicZone]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    publicationState: PublicationState = LIVE
  ): AuthorRelationResponseCollection
  locale: String
}

type AuthorEntity {
  id: ID
  attributes: Author
}

type AuthorEntityResponse {
  data: AuthorEntity
}

type AuthorRelationResponseCollection {
  data: [AuthorEntity!]!
}

input CategoryFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  description: StringFilterInput
  todos: TodoFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [CategoryFiltersInput]
  or: [CategoryFiltersInput]
  not: CategoryFiltersInput
}

input CategoryInput {
  title: String
  description: String
  todos: [ID]
  publishedAt: DateTime
}

type Category {
  title: String!
  description: String
  todos(
    filters: TodoFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TodoRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type CategoryEntity {
  id: ID
  attributes: Category
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

type CategoryRelationResponseCollection {
  data: [CategoryEntity!]!
}

union ContactComponentsDynamicZone =
  ComponentAtomButton
  | ComponentAtomImage
  | ComponentAtomLink
  | ComponentAtomText
  | ComponentAtomTitle
  | ComponentOrganismsHeader
  | ComponentOrganismsTitleDescriptionImage
  | Error

scalar ContactComponentsDynamicZoneInput

input ContactInput {
  components: [ContactComponentsDynamicZoneInput!]
  publishedAt: DateTime
}

type Contact {
  components: [ContactComponentsDynamicZone]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    publicationState: PublicationState = LIVE
  ): ContactRelationResponseCollection
  locale: String
}

type ContactEntity {
  id: ID
  attributes: Contact
}

type ContactEntityResponse {
  data: ContactEntity
}

type ContactRelationResponseCollection {
  data: [ContactEntity!]!
}

union HomepageComponentsDynamicZone =
  ComponentAtomTitle
  | ComponentOrganismsHeader
  | ComponentAtomButton
  | ComponentAtomImage
  | ComponentAtomLink
  | ComponentAtomText
  | ComponentOrganismsTitleDescriptionImage
  | ComponentOrganismsHeroOpener
  | ComponentOrganismsTitleDescriptionButton
  | Error

scalar HomepageComponentsDynamicZoneInput

union HomepageSeoDynamicZone = ComponentUtilsSeo | Error

scalar HomepageSeoDynamicZoneInput

input HomepageInput {
  components: [HomepageComponentsDynamicZoneInput!]
  seo: [HomepageSeoDynamicZoneInput!]
  publishedAt: DateTime
}

type Homepage {
  components: [HomepageComponentsDynamicZone]
  seo: [HomepageSeoDynamicZone]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    publicationState: PublicationState = LIVE
  ): HomepageRelationResponseCollection
  locale: String
}

type HomepageEntity {
  id: ID
  attributes: Homepage
}

type HomepageEntityResponse {
  data: HomepageEntity
}

type HomepageRelationResponseCollection {
  data: [HomepageEntity!]!
}

input TodoFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  description: StringFilterInput
  categories: CategoryFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [TodoFiltersInput]
  or: [TodoFiltersInput]
  not: TodoFiltersInput
}

input TodoInput {
  title: String
  description: String
  categories: [ID]
  publishedAt: DateTime
}

type Todo {
  title: String!
  description: String
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CategoryRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type TodoEntity {
  id: ID
  attributes: Todo
}

type TodoEntityResponse {
  data: TodoEntity
}

type TodoEntityResponseCollection {
  data: [TodoEntity!]!
  meta: ResponseCollectionMeta!
}

type TodoRelationResponseCollection {
  data: [TodoEntity!]!
}

union WhyComponentsDynamicZone =
  ComponentAtomButton
  | ComponentAtomImage
  | ComponentAtomLink
  | ComponentAtomText
  | ComponentAtomTitle
  | ComponentOrganismsHeader
  | ComponentOrganismsTitleDescriptionImage
  | ComponentUtilsComponent
  | ComponentUtilsComponentsList
  | ComponentUtilsMetaRepeatableComponent
  | ComponentUtilsSeo
  | Error

scalar WhyComponentsDynamicZoneInput

input WhyInput {
  components: [WhyComponentsDynamicZoneInput!]
  publishedAt: DateTime
}

type Why {
  components: [WhyComponentsDynamicZone]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    publicationState: PublicationState = LIVE
  ): WhyRelationResponseCollection
  locale: String
}

type WhyEntity {
  id: ID
  attributes: Why
}

type WhyEntityResponse {
  data: WhyEntity
}

type WhyRelationResponseCollection {
  data: [WhyEntity!]!
}

union GenericMorph =
  ComponentAtomButton
  | ComponentAtomImage
  | ComponentAtomInput
  | ComponentAtomLink
  | ComponentAtomText
  | ComponentAtomTitle
  | ComponentOrganismsHeader
  | ComponentOrganismsHeroOpener
  | ComponentOrganismsRegistrationForm
  | ComponentOrganismsTitleDescriptionButton
  | ComponentOrganismsTitleDescriptionImage
  | ComponentUtilsComponent
  | ComponentUtilsComponentsList
  | ComponentUtilsMetaRepeatableComponent
  | ComponentUtilsSeo
  | UploadFile
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | MenusMenu
  | MenusMenuItem
  | AppLogin
  | AppRegistration
  | AppTodo
  | Author
  | Category
  | Contact
  | Homepage
  | Todo
  | Why

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

# A string used to identify an i18n locale
scalar I18NLocaleCode

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

union NavigationItemRelated =
  Homepage
  | AppTodo
  | Author
  | Contact
  | Why
  | AppRegistration
  | AppLogin

type NavigationItemRelatedData {
  id: Int!
  attributes: NavigationItemRelated
}

type NavigationItem {
  id: Int!
  title: String!
  type: String!
  path: String
  externalPath: String
  uiRouterKey: String!
  menuAttached: Boolean!
  order: Int!
  parent: NavigationItem
  master: Int
  items: [NavigationItem]
  related: NavigationItemRelatedData
  created_at: String
  updated_at: String
  created_by: String
  updated_by: String
  createdAt: String
  updatedAt: String
  createdBy: String
  updatedBy: String
  audience: [String]
  page_id: String
  visible: Boolean
}

enum NavigationRenderType {
  FLAT
  TREE
  RFR
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  menusMenu(id: ID): MenusMenuEntityResponse
  menusMenus(
    filters: MenusMenuFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): MenusMenuEntityResponseCollection
  menusMenuItem(id: ID): MenusMenuItemEntityResponse
  menusMenuItems(
    filters: MenusMenuItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): MenusMenuItemEntityResponseCollection
  appLogin(
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): AppLoginEntityResponse
  appRegistration(
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): AppRegistrationEntityResponse
  appTodo(publicationState: PublicationState = LIVE): AppTodoEntityResponse
  author(
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): AuthorEntityResponse
  category(id: ID): CategoryEntityResponse
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CategoryEntityResponseCollection
  contact(
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): ContactEntityResponse
  homepage(
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): HomepageEntityResponse
  todo(id: ID): TodoEntityResponse
  todos(
    filters: TodoFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TodoEntityResponseCollection
  why(
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): WhyEntityResponse
  me: UsersPermissionsMe
  renderNavigationChild(
    id: String!
    childUiKey: String!
    type: NavigationRenderType
    menuOnly: Boolean
  ): [NavigationItem]!
  renderNavigation(
    navigationIdOrSlug: String!
    type: NavigationRenderType
    menuOnly: Boolean
    path: String
    locale: I18NLocaleCode
  ): [NavigationItem]!
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createMenusMenu(data: MenusMenuInput!): MenusMenuEntityResponse
  updateMenusMenu(id: ID!, data: MenusMenuInput!): MenusMenuEntityResponse
  deleteMenusMenu(id: ID!): MenusMenuEntityResponse
  createMenusMenuItem(data: MenusMenuItemInput!): MenusMenuItemEntityResponse
  updateMenusMenuItem(
    id: ID!
    data: MenusMenuItemInput!
  ): MenusMenuItemEntityResponse
  deleteMenusMenuItem(id: ID!): MenusMenuItemEntityResponse
  updateAppLogin(
    data: AppLoginInput!
    locale: I18NLocaleCode
  ): AppLoginEntityResponse
  deleteAppLogin(locale: I18NLocaleCode): AppLoginEntityResponse
  updateAppRegistration(
    data: AppRegistrationInput!
    locale: I18NLocaleCode
  ): AppRegistrationEntityResponse
  deleteAppRegistration(locale: I18NLocaleCode): AppRegistrationEntityResponse
  updateAppTodo(data: AppTodoInput!): AppTodoEntityResponse
  deleteAppTodo: AppTodoEntityResponse
  updateAuthor(data: AuthorInput!, locale: I18NLocaleCode): AuthorEntityResponse
  deleteAuthor(locale: I18NLocaleCode): AuthorEntityResponse
  createCategory(data: CategoryInput!): CategoryEntityResponse
  updateCategory(id: ID!, data: CategoryInput!): CategoryEntityResponse
  deleteCategory(id: ID!): CategoryEntityResponse
  updateContact(
    data: ContactInput!
    locale: I18NLocaleCode
  ): ContactEntityResponse
  deleteContact(locale: I18NLocaleCode): ContactEntityResponse
  updateHomepage(
    data: HomepageInput!
    locale: I18NLocaleCode
  ): HomepageEntityResponse
  deleteHomepage(locale: I18NLocaleCode): HomepageEntityResponse
  createTodo(data: TodoInput!): TodoEntityResponse
  updateTodo(id: ID!, data: TodoInput!): TodoEntityResponse
  deleteTodo(id: ID!): TodoEntityResponse
  updateWhy(data: WhyInput!, locale: I18NLocaleCode): WhyEntityResponse
  deleteWhy(locale: I18NLocaleCode): WhyEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
  createAppLoginLocalization(
    id: ID
    data: AppLoginInput
    locale: I18NLocaleCode
  ): AppLoginEntityResponse
  createAppRegistrationLocalization(
    id: ID
    data: AppRegistrationInput
    locale: I18NLocaleCode
  ): AppRegistrationEntityResponse
  createAuthorLocalization(
    id: ID
    data: AuthorInput
    locale: I18NLocaleCode
  ): AuthorEntityResponse
  createContactLocalization(
    id: ID
    data: ContactInput
    locale: I18NLocaleCode
  ): ContactEntityResponse
  createHomepageLocalization(
    id: ID
    data: HomepageInput
    locale: I18NLocaleCode
  ): HomepageEntityResponse
  createWhyLocalization(
    id: ID
    data: WhyInput
    locale: I18NLocaleCode
  ): WhyEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
